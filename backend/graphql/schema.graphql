scalar DateTimeTz @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTimeTz")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10) @guard

    me: User @guard @auth

    posts: [Post!]! @paginate(defaultCount: 10) @orderBy(column: "created_at", direction: DESC)
    post(id: ID @eq): Post @find
}

type Mutation {
    login(
        email: String!
        password: String!
        device_name: String!
    ): AccessToken! @field(resolver: "App\\GraphQL\\Mutations\\LoginResolver")

    createPost(
        user_id: ID!
        title: String! @rules(apply: ["required", "min:3"])
        body: String! @rules(apply: ["required", "min:3"])
    ): Post @create

    updatePost(
        id: ID!
        title: String! @rules(apply: ["required", "min:3"])
        body: String! @rules(apply: ["required", "min:3"])
    ): Post @update

    deletePost(
        id: ID!
    ): Post @delete
}

type AccessToken {
    token: String!
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    posts: [Post!]! @hasMany

    "When the email was verified."
    email_verified_at: DateTimeTz

    "When the account was created."
    created_at: DateTimeTz!

    "When the account was last updated."
    updated_at: DateTimeTz!
}

type Post {
    id: ID!
    title: String!
    body: String!
    user: User! @belongsTo
    created_at: DateTimeTz!
    updated_at: DateTimeTz!
}
